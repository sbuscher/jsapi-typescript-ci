import { iq as a, j1 as a$1, ir as t, dS as p, dT as c, dU as v, dV as O, is as n, iE as i, i$ as o, Z as a$2, r, aN as w, jD as t$1, dE as r$1, f as s, U, p as g, cu as M, dw as y$1, iF as n$2, ji as e, $ as e$1, a0 as d, dy as o$1, bK as r$3, dY as f, a1 as n$3, dZ as b, gj as S } from '../index.js';
import { r as r$2 } from './scaleUtils.be29ea80.js';
import { E, y, X } from './SublayersOwner.686e7689.js';
import { c as c$1 } from './ExportImageParameters.c6e998f7.js';
import { n as n$1 } from './sublayerUtils.3c3c93de.js';
import './Version.f6121f9f.js';
import './floorFilterUtils.a7d9cb9f.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
let q=class extends(a(a$1(t(E(y(p(c(v(O(n(i(o(a$2(b)))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null;}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}load(e){const r$1=r(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(w).then((()=>this._fetchService(r$1)))),Promise.resolve(this)}readImageFormat(e,r){const t=r.supportedImageFormatTypes;return t&&t.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const i=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let s=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=t$1(o.origin);if(e===r$1.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;s=n$1(i,e,r$1.SERVICE);}else if(e>r$1.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");s=n$1(i,e.sublayers,t$1(e.origin));}}const a=[],p={writeSublayerStructure:s,...o};let n=s;i.forEach((e=>{const r=e.write({},p);a.push(r),n=n||"user"===e.originOf("visible");}));a.some((e=>Object.keys(e).length>1))&&(r.layers=a),n&&(r.visibleLayers=i.filter((e=>e.visible)).map((e=>e.id)));}createExportImageParameters(e,r,t,o){const i=o&&o.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const s=new c$1({layer:this,floors:o?.floors,scale:r$2({extent:e,width:r})*i}),a=s.toJSON();s.destroy();const p=!o||!o.rotation||this.version<10.3?{}:{rotation:-o.rotation},n=e&&e.spatialReference,m=n.wkid||JSON.stringify(n.toJSON());a.dpi*=i;const l={};if(o?.timeExtent){const{start:e,end:r}=o.timeExtent.toJSON();l.time=e&&r&&e===r?""+e:`${null==e?"null":e},${null==r?"null":r}`;}else this.timeInfo&&!this.timeInfo.hasLiveData&&(l.time="null,null");return {bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:m,imageSR:m,size:r+","+t,...a,...p,...l}}async fetchImage(e,t,i,s$1){const a={responseType:"image",signal:s$1?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,t,i,s$1),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},p=this.parsedUrl.path+"/export";if(null!=a.query.dynamicLayers&&!this.capabilities.exportMap.supportsDynamicLayers)throw new s("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});return U(p,a).then((e=>e.data)).catch((e=>{if(g(e))throw e;throw new s("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:e})}))}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:i}=await U(this.url,o),{extent:s,fullExtent:a,timeExtent:p}=i,n=s||a;return {fullExtent:n&&M.fromJSON(n),timeExtent:p&&y$1.fromJSON({start:p[0],end:p[1]})}}loadAll(){return n$2(this,(e=>{e(this.allSublayers);}))}serviceSupportsSpatialReference(e$1){return e(this,e$1)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:o}=await U(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});o&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl});}};e$1([d({type:Boolean})],q.prototype,"datesInUnknownTimezone",void 0),e$1([d()],q.prototype,"dpi",void 0),e$1([d()],q.prototype,"gdbVersion",void 0),e$1([d()],q.prototype,"imageFormat",void 0),e$1([o$1("imageFormat",["supportedImageFormatTypes"])],q.prototype,"readImageFormat",null),e$1([d({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],q.prototype,"imageMaxHeight",void 0),e$1([d({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],q.prototype,"imageMaxWidth",void 0),e$1([d()],q.prototype,"imageTransparency",void 0),e$1([d({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],q.prototype,"isReference",void 0),e$1([d({json:{read:!1,write:!1}})],q.prototype,"labelsVisible",void 0),e$1([d({type:["ArcGISMapServiceLayer"]})],q.prototype,"operationalLayerType",void 0),e$1([d({json:{read:!1,write:!1}})],q.prototype,"popupEnabled",void 0),e$1([d()],q.prototype,"sourceJSON",void 0),e$1([d({json:{write:{ignoreOrigin:!0}}})],q.prototype,"sublayers",void 0),e$1([r$3("sublayers",{layers:{type:[X]},visibleLayers:{type:[S]}})],q.prototype,"writeSublayers",null),e$1([d({type:["show","hide","hide-children"]})],q.prototype,"listMode",void 0),e$1([d({json:{read:!1},readOnly:!0,value:"map-image"})],q.prototype,"type",void 0),e$1([d(f)],q.prototype,"url",void 0),q=e$1([n$3("esri.layers.MapImageLayer")],q);const F=q;

export { F as default };
//# sourceMappingURL=MapImageLayer.45d71b7a.js.map
